[build-system]
requires = [
  "setuptools>=64",
  "setuptools_scm>=8"
]
build-backend = "setuptools.build_meta"

[project]
name = "vllm-spyre"
description = "vLLM plugin for Spyre hardware support"
readme = "README.md"
license = {text = "Apache 2"}
dependencies = [
    "fms-model-optimizer>=0.2.0",
    "ibm-fms==0.0.8",
    "vllm",
]
requires-python = ">=3.9"
dynamic = ["version"]

[project.entry-points."vllm.platform_plugins"]
spyre = "vllm_spyre:register"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["vllm_spyre*"]  # package names should match these glob patterns (["*"] by default)
exclude = []  # exclude packages matching these glob patterns (empty by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)

[tool.setuptools_scm]
# Version files are optional, this just marginally speeds up version inspection
# at runtime
version_file = "vllm_spyre/_version.py"
# Version strings are formatted as `{version}+{local}`, e.g. "0.1.dev1+gb1a7032"
# Local versioning is incompatible with pypi, so we disable it by default.
local_scheme = "no-local-version"
# For more version configuration, see 
# https://setuptools-scm.readthedocs.io/en/latest/config/


[tool.uv]
# Never install torch, so that no dependencies can override it.
# This requires that torch is installed separately in the target environment.
# Triton >3.1 breaks tests against vllm/main and fms-mo requires it.
# Triton also cannot be installed on macs.
override-dependencies = [
    "torch; sys_platform == 'never'",
    "torchaudio; sys_platform == 'never'",
    "torchvision; sys_platform == 'never'",
    "triton>=3.0,<3.2; sys_platform != 'darwin'",
]
# fms-mo doesn't support python 3.9, so don't have UV try to resolve it
environments = [
    "python_version > '3.9'"
]

[tool.uv.sources]
vllm = { git = "https://github.com/vllm-project/vllm", rev = "v0.8.4" }

[tool.ruff]
# Allow lines to be as long as 80.
line-length = 80
exclude = [
    "vllm_spyre/model_executor/model_loader/spyre_setup.py"
]

[tool.ruff.lint.per-file-ignores]
"vllm_spyre/version.py" = ["F401"]
"vllm_spyre/_version.py" = ["ALL"]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    # "I",
    "G",
]
ignore = [
    # star imports
    "F405", "F403",
    # lambda expression assignment
    "E731",
    # Loop control variable not used within loop body
    "B007",
    # f-string format
    "UP032",
]

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true
follow_imports = "silent"

# After fixing type errors resulting from follow_imports: "skip" -> "silent",
# move the directory here and remove it from tools/mypy.sh
files = [
]
# TODO(woosuk): Include the code from Megatron and HuggingFace.
exclude = [
    'vllm_spyre/model_executor/model_loader/spyre_setup.py'
]

[tool.codespell]
ignore-words-list = "dout, te, indicies, subtile, ElementE"
#skip = "./tests/models/fixtures,./tests/prompts,./benchmarks/sonnet.txt,./tests/lora/data,./build"

[tool.isort]
use_parentheses = true
skip_gitignore = true

[tool.pytest.ini_options]
pythonpath = ["."]
markers = [
    "skip_global_cleanup",
    "e2e: Tests using end-to-end engine spin-up",
    "v0: Tests using vLLM v0 engine",
    "v1: Tests using vLLM v1 engine",
    "cpu: Tests using CPU (i.e. eager) backend",
    "spyre: Tests using Spyre hardware backend",
    "decoder: Tests for decoder models",
    "embedding: Tests for embedding models",
    "quantized: Tests for quantized models",
    "multi: Tests that require >1 cards",
    "utils: Tests for utility functions",
    "worker: Tests for worker logic",
]

[tool.pymarkdown]
plugins.md013.enabled = false # line-length
plugins.md041.enabled = false # first-line-h1
plugins.md033.enabled = false # inline-html
plugins.md024.allow_different_nesting = true # no-duplicate-headers

[dependency-groups]
dev = [
    "pytest==8.3.4",
    "pytest-forked==1.6.0",
    "pytest-timeout==2.3.1",
    "requests==2.32.3",
    "sentence-transformers==3.4.1",
]
lint = [
    "clang-format==18.1.5",
    "codespell==2.3.0",
    "isort==5.13.2",
    "mypy==1.11.1",
    "pymarkdownlnt==0.9.26",
    "ruff==0.6.5",
    "toml==0.10.2",
    "tomli==2.0.2",
    "types-pyyaml>=6.0.12.20250326",
    "types-requests>=2.32.0.20250328",
    "types-setuptools>=77.0.2.20250328",
    "yapf==0.43.0",
]
